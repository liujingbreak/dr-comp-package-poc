var gulp = require('gulp');
var webpackStream = require('webpack-stream');
var webpack = require('webpack');
var api = require('__api');
var log = require('log4js').getLogger(api.packageName);
const publicDir = '/wp/';

var webpackConfig = {
	context: api.config().rootPath,
	entry: {
		example: '@dr/example-webpack',
		lodash: 'lodash'
	},
	output: {
		filename: '[name].[chunkhash].js',
		publicPath: api.config().staticAssetsURL + publicDir
	},
	module: {
		rules: [
			{
				test: /\.html$/,
				use: {loader: 'html-loader'},
			}, {
				test: /\.txt$/,
				use: {loader: 'raw-loader'}
			}, {
				test: /\.(yaml|yml)$/,
				use: [
					{loader: 'json-loader'},
					{loader: 'yaml-loader'}
				]
			}
		]
	},
	plugins: [
		new webpack.optimize.CommonsChunkPlugin({
			names: ['manifest', 'lodash'] // Specify the common bundle's name.
		}),
		// new webpack.ProvidePlugin({
		// 	__api: '@dr-core/browserify-builder-api'
		// }),
		function() {
			this.plugin('done', function(stats) {
				//log.info('stats', JSON.stringify(stats.toJson(), null, '  '));
			});

			this.plugin('emit', function(compilation, callback) {
				compilation.modules.forEach(function(module) {
					log.info('compilation module %s', module.rawRequest);
				});
				// Explore each chunk (build output):
				compilation.chunks.forEach(function(chunk) {
					log.info('chunk: id[%s] %s, parents:[%s]', chunk.id, chunk.name, chunk.parents.map(p => p.id).join(', '));
					// Explore each module within the chunk (built inputs):
					chunk.modules.forEach(function(module) {
						// Explore each source file path that was included into the module:
						log.info('  ├─ module: %s', module.rawRequest);
						module.fileDependencies.forEach(function(filepath) {
							log.info('    ├─ fileDependency %s', filepath);
							// we've learned a lot about the source structure now...
						});
					});

					// Explore each asset filename generated by the chunk:
					chunk.files.forEach(function(filename) {
						log.info('  ├─ file %s', filename);
						// Get the asset source for each file generated by the chunk:
						//var source = compilation.assets[filename].source();
					});
				});

				callback();
			});
		}
	]
};

exports.compile = (api) => {
	if (api.config().devMode)
		webpackConfig.output.filename = '[name].js';

	return gulp.src('.')
		.pipe(webpackStream(webpackConfig, webpack))
		.pipe(gulp.dest(api.config().staticDir + publicDir));
};
