var log = require('log4js').getLogger('ManualChunkPlugin');
var _ = require('lodash');
var Path = require('path');
var nextIdent = 0;

function ManualChunkPlugin() {
	this.ident = __filename + (nextIdent++);
}

module.exports = ManualChunkPlugin;

ManualChunkPlugin.prototype.apply = function(compiler) {
	var ident = this.ident;

	compiler.plugin('this-compilation', function(compilation) {
		compilation.plugin(['optimize'], function() {
			log.debug('---------------------------------');
		});
		compilation.plugin(['optimize-chunks', 'optimize-extracted-chunks'], function(chunks) {
			// only optimize once
			if (compilation[ident])
				return;
			compilation[ident] = true;
			log.debug('optimize: %s', chunks.map(c => c.name).join(', '));
			printChunks(chunks);
		});
	});

	compiler.plugin('emit', function(compilation, callback) {
		log.debug('------------- emit ------------------');
		compilation.modules.forEach(function(module) {
			log.debug('compilation module %s', simpleModuleId(module));
		});
		printChunks(compilation.chunks);
		callback();
	});

	function divideModule() {}

	function simpleModuleId(module) {
		return Path.relative(compiler.options.context, (module.identifier() || module.name).split('!').slice().pop());
	}

	function printChunks(chunks) {
		chunks.forEach(function(chunk) {
			log.debug('chunk: #%s, "%s", parents:[%s], isInitial: %s, ids: %s',
				chunk.id != null ? chunk.id : chunk.debugId, chunk.name,
				chunk.parents.map(p => '#' + (p.id != null ? p.id : p.debugId)).join(', '), chunk.isInitial(), chunk.ids);
			log.debug('\tchildren: [%s]', chunk.chunks.map(ck => '#' + (ck.id != null ? ck.id : ck.debugId)).join(', '));
			if (chunk.hasRuntime())
				log.debug('  has runtime!');
			log.debug('  ├─ modules');
			chunk.modules.forEach(function(module) {
				// Explore each source file path that was included into the module:
				log.debug('  │  ├─ #%s %s', module.id, simpleModuleId(module));
				_.each(module.fileDependencies, filepath => {
					log.debug('  │  │  ├─ fileDependency: %s', Path.relative(compiler.options.context, filepath));
				});
				_.each(module.blocks, block => {
					log.debug('  │  │  ├─ block chunks: %s',
						block.chunks.map( ck => {
							return '#' + (ck.id != null ? ck.id : ck.debugId);
						}).join(', '));
				});
			});
			log.debug('  │  ');

			// Explore each asset filename generated by the chunk:
			chunk.files.forEach(function(filename) {
				log.debug('  ├─ file: %s', filename);
				// Get the asset source for each file generated by the chunk:
				//var source = compilation.assets[filename].source();
			});
		});
	}
};

